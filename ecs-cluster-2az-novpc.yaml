AWSTemplateFormatVersion: '2010-09-09'
Conditions:
  CreateEC2LCWithKeyPair:
    Fn::Not:
    - Fn::Equals:
      - Ref: KeyName
      - ''
  CreateEC2LCWithoutKeyPair:
    Fn::Equals:
    - Ref: KeyName
    - ''
  CreateSecurityGroup:
    Fn::Equals:
    - Ref: SecurityGroup
    - ''
Description: AWS CloudFormation template to create resources required to run tasks
  on an ECS cluster for Regions with 2 AZ.
Mappings:

  #tofix: update with latest region and ami
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI_launch_latest.html
  AWSRegionToAMI:
    ap-northeast-1:
      AMIID: ami-b743bed1
    ap-southeast-1:
      AMIID: ami-9d1f7efe
    ap-southeast-2:
      AMIID: ami-c1a6bda2
    eu-central-1:
      AMIID: ami-0460cb6b
    eu-west-1:
      AMIID: ami-8fcc32f6
    eu-west-2:
      AMIID: ami-cb1101af
    us-east-1:
      AMIID: ami-9eb4b1e5
    us-east-2:
      AMIID: ami-1c002379
    us-west-1:
      AMIID: ami-4a2c192a
    us-west-2:
      AMIID: ami-1d668865
    ca-central-1:
      AMIID: ami-b677c9d2


Outputs:
  ECSCluster:
    Value: !Ref EcsCluster
    
Parameters:
  AsgMaxSize:
    Default: '2'
    Description: Maximum size and initial Desired Capacity of ECS Auto Scaling Group
    Type: Number
  # CodeCommitRepoName:
  #   #Default: ''
  #   Description: Code commit Repo name that has to be created
  #   Type: String
  EnvironmentName:
    Type: String

  EcsClusterName:
    Default: microservices
    Description: ECS Cluster Name
    Type: String
  EcsInstanceType:
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - p2.xlarge
    - p2.8xlarge
    - p2.16xlarge
    - g2.2xlarge
    - g2.16xlarge
    - x1.16xlarge
    - x1.32xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - r4.large
    - r4.xlarge
    - r4.2xlarge
    - r4.4xlarge
    - r4.8xlarge
    - r4.16xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - g2.2xlarge
    - g2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.
    Default: t2.micro
    Description: ECS EC2 instance type
    Type: String
  KeyName:
    Default: ''
    Description: Optional - Name of an existing EC2 KeyPair to enable SSH access to the ECS instances
    Type: AWS::EC2::KeyPair::KeyName
  SecurityGroup:
    Default: ''
    Description: Optional - Existing security group to associate the container instances.
      Creates one by default.
    Type: String
  SourceCidr:
    Default: 0.0.0.0/0
    Description: Optional - CIDR/IP range for EcsPort - defaults to 0.0.0.0/0
    Type: String
  SubnetIds:
    Description:  Comma separated list of two (2) existing VPC Subnet Ids
      where ECS instances will run.  Required if setting VpcId.
    Type: CommaDelimitedList
  
  VpcId:
    AllowedPattern: ^(?:vpc-[0-9a-f]{17}|)$
    ConstraintDescription: VPC Id must begin with 'vpc-' 
    Description: VPC Id of existing VPC. 
    Type: String
Resources:

  # AWSCodeCommitRepository:
  #   Type: AWS::CodeCommit::Repository
  #   Properties:
  #     RepositoryName: 
  #      Ref: CodeCommitRepoName
  #     RepositoryDescription: cicd repo
  CWLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub ${EcsClusterName}
      RetentionInDays: 7 # [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
  EcsCluster:
    Properties:
      ClusterName:
        Ref: EcsClusterName
    Type: AWS::ECS::Cluster
  EcsInstanceAsg:
    Properties:
      DesiredCapacity:
        Ref: AsgMaxSize
      LaunchConfigurationName:
        Fn::If:
        - CreateEC2LCWithKeyPair
        - Ref: EcsInstanceLc
        - Ref: EcsInstanceLcWithoutKeyPair
      MaxSize:
        Ref: AsgMaxSize
      MinSize: '1'
      Tags:
      - Key: Name
        PropagateAtLaunch: 'true'
        Value:
          Fn::Join:
          - ''
          - - 'ECS Instance - '
            - Ref: AWS::StackName
      VPCZoneIdentifier:
        Ref: SubnetIds
    Type: AWS::AutoScaling::AutoScalingGroup
  EcsInstanceLc:
    Condition: CreateEC2LCWithKeyPair
    Properties:
    # true
      AssociatePublicIpAddress: false 
      IamInstanceProfile:
        Ref: EcsInstanceProfile
      ImageId:
        Fn::FindInMap:
        - AWSRegionToAMI
        - Ref: AWS::Region
        - AMIID
      InstanceType:
        Ref: EcsInstanceType
      KeyName:
        Ref: KeyName
      SecurityGroups:
        - Ref: SecurityGroup
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - '#!/bin/bash

              '
            - echo ECS_CLUSTER=
            - Ref: EcsClusterName
            - ' >> /etc/ecs/ecs.config

              '
            - 'sudo yum update -y ecs-init

              '
    Type: AWS::AutoScaling::LaunchConfiguration
  EcsInstanceLcWithoutKeyPair:
    Condition: CreateEC2LCWithoutKeyPair
    Properties:
    # true
      AssociatePublicIpAddress: false
      IamInstanceProfile:
        Ref: EcsInstanceProfile
      ImageId:
        Fn::FindInMap:
        - AWSRegionToAMI
        - Ref: AWS::Region
        - AMIID
      InstanceType:
        Ref: EcsInstanceType
      SecurityGroups:
        - Ref: SecurityGroup
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - '#!/bin/bash

              '
            - echo ECS_CLUSTER=
            - Ref: EcsClusterName
            - ' >> /etc/ecs/ecs.config

              '
            - 'sudo yum update -y ecs-init

              '
    Type: AWS::AutoScaling::LaunchConfiguration
  EcsInstancePolicy:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Path: /
    Type: AWS::IAM::Role
  EcsInstanceProfile:
    Properties:
      Path: /
      Roles:
      - Ref: EcsInstancePolicy
    Type: AWS::IAM::InstanceProfile